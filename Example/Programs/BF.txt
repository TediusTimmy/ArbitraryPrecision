 (*
   A brainfuck interpretter:
      Constructive proof that the language is Turing complete.
      C. Bohm has given a proof of brainfuck's Turing completeness
         (though not by the name brainfuck).
   Demonstrates well how to build arrays without arrays.

   Interpretter EOF behavior: returns 0.

   Cells are 8-bit 2's complement.
 *)

var Text,
    PC { Program Counter },
    WD { While Depth },
    DP { Data Pointer },
    Data,
    CI { Current Instruction },
    Temp,
    Input.

begin
   prints "Enter the program:".
   Temp <- 1.
   while Temp
      begin
         reads Input.
         while Input && Temp
            begin
               CI := Input & 255.
               Input := Input >> 8.
               if ((CI == '+') || (CI == '-') || (CI == '<') || (CI == '>') ||
                   (CI == '[') || (CI == ']') || (CI == ',') || (CI == '.'))
                  begin
                     Text := Text | (CI << PC).
                     PC := PC + 8.
                  end
               else if CI == '!'
                  Temp <- 0.
            end.
      end.
   PC <- 0.

   CI <- Text & 255.
   while CI <> 0
      begin
         PC <- PC + 8.

         if CI == '+'
            begin
               Temp := (Data >> DP) & 255.
               Temp := ~((Temp + 1) | 256).
               Data := (Data | (255 << DP)) ^^ (Temp << DP).
            end
         else if CI == '-'
            begin
               Temp := (Data >> DP) & 255.
               Temp := ~((Temp + 255) | 256).
               Data := (Data | (255 << DP)) ^^ (Temp << DP).
            end
         else if CI == '>'
            begin
               DP = DP + 8.
            end
         else if CI == '<'
            begin
               DP = DP - 8.
            end
         else if CI == ','
            begin
               if Input == 0
                  reads Input.
               Temp := ~((Input & 255) | 256).
               Input := Input >> 8.
               Data := (Data | (255 << DP)) ^^ (Temp << DP).
            end
         else if CI == '.'
            begin
               Temp := (Data >> DP) & 255.
               prints Temp;.
            end
         else if CI == '['
            begin
               if not ((Data >> DP) & 255)
                  begin
                     WD <- 1.
                     while WD
                        begin
                           if (Text >> PC) & 255 == '['
                              WD <- WD + 1
                           else if (Text >> PC) & 255 == ']'
                              WD <- WD - 1.
                           PC <- PC + 8.
                        end.
                  end.
            end
         else if CI == ']'
            begin
               if (Data >> DP) & 255
                  begin
                     WD <- 1.
                     PC <- PC - 8.
                     while WD
                        begin
                           PC <- PC - 8.
                           if (Text >> PC) & 255 == ']'
                              WD <- WD + 1
                           else if (Text >> PC) & 255 == '['
                              WD <- WD - 1.
                        end.
                     PC <- PC + 8.
                  end.
            end.

         CI <- (Text >> PC) & 255.
      end.
end.
