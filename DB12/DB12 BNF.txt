<program>	=>	<dim_vars> <statement_seq>

<dim_vars>	=>	{"dim" <identifier> {"," <identifier>} <nl>}

<statement_seq> =>	<statement> <nl> <statement_seq>
			""

<statement>	=>	":" <identifier> ":"
			<variable> <assign> <expression>
			"if" <expression> "then" <nl> <statement_seq>
				{"else" "if" <expression> "then" <nl>
				<statement_seq>}
				["else" <nl> <statement_seq>]
				("end if" | "fi")
			"if" <expression> "then" <statement>
				["else" <statement>]
			"while" <expression> <nl> <statement_seq>
				("wend" | "end while")
			"until" <expression> <nl> <statement_seq>
				("repeat" | "end until")
			"do" <nl> <statement_seq> "loop"
				[("while" | "until") <expression>]
			"break" <label>
			"continue" <label>
			"for" <variable> <assign> <expression>
				("to" | "downto") <expression>
				["step" <expression>] <nl>
				<statement_seq>
				("next" | "end for")
			"select" <expression> <nl> {["and"]
				"case" <constant> <nl> <statement_seq>}
				[["and"] "case" "else" <nl> <statement_seq>]
				"end select"
			"call" <identifier>
				[<expression> {"," <expression>}3]
			"return" [<expression> {"," <expression>}3]
			"end"

			"print" <expression>
			"input" <variable>
			"write" <expression>
			"read" <variable>
			"goto" <expression> "," <expression>
			"color"	<expression>
			"bsave" <expression> "," <expression>
			"bload" <variable> "," <expression> "," <expression>
			"run" <expression>

			<nl>

<nl>		=>	";" .* "\n"
			"\n"

<identifier>	=>	<letter> {<letter> | <number>}+

<label>		=>	<identifier>

<variable>	=>	<identifier> | <letter>

<assign>	=>	"=" | ":=" | "<-"

<expression>	=>	<boolean> {("\/" | "or" | "/\" | "and") <boolean>}

<boolean>	=>	<clause> {("||" | "or" "else") <clause>}

<clause>	=>	<predicate> {("&&" | "and" "then") <predicate>}

<predicate>	=>	<relation> { <equivalence> <relation> }

<equivalence>	=>	"=" | "==" | "<>" | "#" | "!=" | "~="

<relation>	=>	<or> { <relate> <or> }

<relate>	=>	">=" | ">" | "<=" | "<"

<or>		=>	<xor> {"|" <xor>}

<xor>		=>	<and> {"?" <and>}

<and>		=>	<shift> {"&" <shift>}

<shift>		=>	<simple> {("<<" | ">>") <simple> }

<simple>	=>	<term> {("+" | "-" | "." | "##" | "$") <term>}

<term>		=>	<factor> {("*" | "/" | "%" | "//" | "%%") <factor>}

<factor>	=>	<primary> [("^" | "**") <factor>]

<primary>	=>	("+" | "-" | "~" | "!" | "not") <primary>
			<constant>
			<variable>
			"(" <expression> ")"

<constant>	=>	<number>+
			""" .* """
			"'" .* "'"

<comment>	=>	^"#" .* "\n"
			"{" .* "}"
			"(*" .* "*)"


Notes:
   break and continue with labels work as in Java
   goto, color, bsave, bload, and run are not implemented
   lines can be continued by ending them with a '\' before the newline
      there must be no space between the '\' and the '\n'
      this cannot be used in the middle of strings
   the ';' acts as the ''' in BASIC: this was changed to allow
      the use of single quote strings
   lines that begin with a '#' are comment lines
      the FIRST byte of the line must be the '#'
   Pascal/Oberon-style multi-line comments were included to allow
      code to be commented out easily, as there is no GOTO statement
      the "goto" statement here is for manipulating output to the screen
   SELECT is not a DUMBBASIC 11 SELECT: it is not a looping construct
      break does not work within it as in C
      the CASEs are breaking, use "and case" to make them non-breaking
         that is the word "and" and not "&&" or "/\"
         this is a better solution than adding "choice" and "default"
      also, like C and unlike BASIC,
         SELECT requires that the cases are constants :
         the implementation was easier
      if ranges or variables are needed, use the if construct
         which is nicely expanded, if I do say so myself
   continue in a DO ... LOOP works as in C/Java and not as in DUMBBASIC 11
   identifiers MUST be two characters or more
      one character identifiers are local variables
   '.', '##', and '$' are string concatenation
      '.' from Perl, '##' from C-preprocessor, and '$' from my other lang
      '$' is also the string type postfix in MS BASIC
   '?' is bitwise XOR, so it has a one character token
      not that I need to copy that C abomination, anyhow
   according to Wikipedia, the logicals in one of the ALGOL languages
      used the proper notation for those operations,
      which is how the useless '\' got to be on the keyboard:
      so they could be built as digraphs: '/\' and '\/'
      I have incorporated that history here

   so, I figured out (or just bothered to include) short-circuit evaluation
      and included the Ada versions, to boot
      now all that is needed is arrays

DUMBBASIC Function scheme:
   The main program is a function.
      The program ends if main returns.
   All functions have 16 local variables A-P, Q-T, and W-Z (yes, that is 24).
      They must be refered to in CAPS.
   A called function inherits the value of all 24 variables.
   If the call has four (no more or less) arguments,
      these are assigned to Q-T in the callee
   When the callee returns, the values in W-Z are placed in the variables
      Q-T of the caller.
   If the return has four arguments (no more or less),
      then those four values are placed in Q-T of the caller.

   A function has 16 local variables because eight of them are used by the
   calling convention, though W-Z are safe from side effects, so they really
   have 20.
